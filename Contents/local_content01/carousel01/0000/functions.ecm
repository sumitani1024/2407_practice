
// ボディ非表示の場合
if( browser.Ureg[5] == "invisible" || browser.Ureg[5] == "JISHIN_12SEG") {
 g( "Body" ).normalStyle.usedKeyList = "none";
 g( "Body" ).invisible = "invisible"; // ボディの消去
}
// ボディ表示の場合
else {
 g( "Body" ).invisible = false; // ボディの表示
 g( "Body" ).normalStyle.usedKeyList = "basic data-button";
}
//////////////////////////////////////////////////////////////////////////////////////////
// 共通定数群
//////////////////////////////////////////////////////////////////////////////////////////

// 自コンテンツが送出されているＥＳを取得
var me = browser.getActiveDocument();
var ES = me.substring(0,4);
var MODULE = me.substring(4,8);

var g_modulePath = new Object();
//	g_modulePath.M0 = ES + "0000";
	g_modulePath.M1 = ES + "0001";
	g_modulePath.M2 = ES + "0002";
	g_modulePath.M3 = ES + "0003";

var g_link = new Object();
	g_link.tv         = "/40/0000/startup.bml"; // 全画面
	g_link.nhkTop     = "/40/0000/top.bml";     // NHKTOP
	g_link.programTop = "/50/0000/startup.bml"; // 番組TOP

//copypaste.ecm
var startBML="/40/0000/startup.bml";
var topBML="/40/0000/top.bml";

//////////////////////////////////////////////////////////////////////////
//　全画面表示へ遷移
//////////////////////////////////////////////////////////////////////////
function gotoTV(){
	cu();//Uregクリア
  	browser.launchDocument( g_link.tv, "cut" );
}
//////////////////////////////////////////////////////////////////////////
//　ＮＨＫトップへ遷移
//////////////////////////////////////////////////////////////////////////
function gotoNHKTop(){
	cu();//Uregクリア
	browser.launchDocument( g_link.nhkTop, "cut" );
}
//////////////////////////////////////////////////////////////////////////////////////////
// データイベントチェンジ
//////////////////////////////////////////////////////////////////////////////////////////
function dataEvtChanged()
{
  var evtStatus;
  evtStatus = document.currentEvent.status;
  if( evtStatus == 0 ){
    gotoNHKTop();}
  else if( evtStatus == 1 ){
    gotoTV();}
  else if( evtStatus == -1 ){
    gotoTV();
  }
}
//////////////////////////////////////////////////////////////////////////
//　自モジュールアップデート
//////////////////////////////////////////////////////////////////////////
function srcUpdated(){
  var evtStatus;
  evtStatus = document.currentEvent.status;
  if ( evtStatus == 2 ){//起動直後
  }
  else if ( evtStatus == 0 ){// モジュールの更新
    browser.reloadActiveDocument();}
  else if ( evtStatus == 1 ){// モジュールの消滅
    gotoTV();} // 全画面表示
  else if( evtStatus == -1 ){// エラー
    gotoTV(); // 全画面表示
  }
}

//////////////////////////////////////////////////////////////////////////////////////////
// NV
//////////////////////////////////////////////////////////////////////////////////////////
var nvI = new Object();
	nvI.data = new Array();
	nvI.fmt = "";
	nvI.nid = 1;
	nvI.def = new Array();
	nvI.url = "";
	nvI.blk = "";
function NV_F(url,blk,fmt,nid,def,data){
	this.url = url;
	this.blk = blk;
	this.fmt = fmt;
	this.nid = nid;
	this.def = def;
	this.data = data;
	this.write = writeNV;
	this.read = readNV;
}
function writeNV(ary){
	debugN("□---ＮＶ書込");
	if(isDVHS()) {debugN("NV書込みなし(録画再生)");return;}
//	if(gComIniAry["com_saihoso"]=="1") {debugN("NV書込みなし(再放送)");return;}
	if(isUnde(ary) || ary==null){
		ary = this.data;
	}
	for(var i=0;i<3;i++){
		var value = browser.writePersistentArray( this.url+this.blk, this.fmt, ary );
		if(value>0){
			break;
		}else{
			debugN("（！）書込失敗");
			browser.sleep(500);
			continue;
		}
	}
	return value;//エラーならNaN
}
function readNV(){
	debugN("□---ＮＶ読込");
	for(var i=0;i<3;i++){
		var value = browser.readPersistentArray( this.url+this.blk, this.fmt );
		if(value!=null){
			if( value[0] != this.nid ) {
				debugN("（！）NVID不一致");
				value[0] = 255;
		    }
			break;
		}else{
			debugN("（！）読込失敗！");
			browser.sleep(500);
			continue;
		}
	}
	return value;//エラーならnull
}
/*
//以下使用例
//NVデータセット
nvI.blk = gComIniAry["com_renNV-block"];
nvI.nid = gComIniAry["com_renNV-id"];
nvI.fmt = gComIniAry["com_renNV-struct"].split("|").join(",");
var td = gComIniAry["com_renNV-default"].split("|");
for(var di=0;di<td.length;di++){
	nvI.def[di] = td[di];
}
//NVインスタンス生成
gNV = new NV_F(nvI.url,nvI.blk,nvI.fmt,nvI.nid,nvI.def,nvI.data);
//REC時はNVを読まない
if(isDVHS()) {
	gNV.data[14]="";
}else{
	//NV読み込み
	gNV.data = gNV.read();
	if(gNV.data == null || gNV.data[0] == 255){
		gNV.def[0] = gNV.nid;
		gNV.write(gNV.def);
		gNV.data = gNV.read();
	}
	debugN("NV="+gNV.data);
}
*/

// 必須関数(放送)
var me=browser.getActiveDocument();
var ES=me.substring(0,4);
var startBML="/40/0000/startup.bml";
var topBML="/40/0000/top.bml";
var sll=0;
var mll=new Array();
var kr=true;
var mc=parseInt(browser.getProgramID(2),16);
if(mc>999)
mc=(mc&8?20:10)+(mc&7)+1;
var back="";
function so(c_n){browser.playRomSound("romsound://"+c_n);}
function g(c_id){return(document.getElementById(c_id));}
function p(c_id,c_s){g(c_id).firstChild.data=c_s;}
function o(c_id,c_s){g(c_id).data=c_s;}
function s(c_id){return(g(c_id).normalStyle);}
function v(c_id,c_n){if(!c_n)s(c_id).visibility="hidden";else if(c_n==1)s(c_id).visibility="visible";}
function iv(c_id){return s(c_id).visibility=="visible";}
function re(){ml("",2);browser.reloadActiveDocument();}
function lu(c_uri){browser.launchDocument(c_uri,"cut");}
function luSTARTUP(){ml("",2);cu();if(back.length)g(back).remain=false;lu(startBML);}
function luTOP(){ml("",2);cu();if(back.length)g(back).remain=false;lu(topBML);}
function sl(c_n){if(c_n){if(!sll)browser.lockScreen();sll++;}else{sll--;if(!sll)browser.unlockScreen();}}
function cu(){for(var c_n=1;c_n<45;c_n++){browser.Ureg[c_n]="";}}
function dec(){var c_s=document.currentEvent.status;if(c_s==1||!c_s&&ES=="/50/")luSTARTUP();else if(!c_s)luTOP();}
function ss(c_id,c_uri,c_n){if(c_n){g(c_id).moduleRef=c_uri;g(c_id).subscribe=true;}else g(c_id).subscribe=false;}
function ml(c_uri,c_n){if(c_n<2){mll[c_uri]=c_n|(mc<100&&c_uri.substring(0,4)!=ES&&(c_uri.substring(1,3)=="40"||c_uri.substring(1,3)=="50"||c_uri.substring(1,3)=="60")?2:0);if(mll[c_uri]&2)return c_n?browser.lockModuleOnMemoryEx(c_uri):browser.unlockModuleOnMemoryEx(c_uri);else return c_n?browser.lockModuleOnMemory(c_uri):browser.unlockModuleOnMemory(c_uri);}else{for(var c_m in mll)if(mll[c_m])mll[c_m]&2?browser.unlockModuleOnMemoryEx(c_m):browser.unlockModuleOnMemory(c_m);mll=new Array();return 1;}}
function muSRC(){var c_s=document.currentEvent.status;if(!c_s)re();else if(c_s==1)luSTARTUP();}
function d(){so(7);luSTARTUP();}
function kt(){kr=true;}
function ks(){if(!kr)return true;kr=false;return false;}
function ke(){browser.setInterval("kt();",100,1);sll=0;}
function ca(c_d,c_s){for(var c_n=0;c_n<c_s.length;c_n++)c_d[c_n]=c_s[c_n];}

var debug=browser.Ureg[53]=="debug"?1:0;
var ard=new Array();
function dbg(c_s){if(debug){var c_n=parseInt(s("debug").height)/20;var c_c=String(c_s);while(c_c.length){ard[debug-1]=strL(c_c,parseInt(s("debug").width)/10);c_c=c_c.substring(ard[debug-1].length);debug=(debug)%c_n+1;}var c_p="";for(var c_m=ard.length-1;c_m>=0;c_m--)c_p+=ard[(debug-2-c_m+c_n)%c_n]+"\r\n";p("debug",c_p);}}

//////////////////////////////////////////////////////////////////////////////
// 共通関数
//////////////////////////////////////////////////////////////////////////////
function cu(){var i=1;for(; i<=44; i++) {browser.Ureg[i]="";}}
function getEvent() { return document.currentEvent; }
function g(id) { return document.getElementById(id); }
function getID() { return getEvent().target.id; }
function getKey() { return getEvent().keyCode; }
function getStatus(){ return getEvent().status; }
function getModule() { return getEvent().moduleRef; }
function getStyle(id) { return g(id).normalStyle; }
function getUreg(index) { return browser.Ureg[index]; }
function setUreg(index, data) { browser.Ureg[index] = data.toString(); }
function getData(id) { return g(id).firstChild.data; }
function setData(id, data) { g(id).firstChild.data = "" + data; }
function setObject(id, data) { g(id).data = data; }
function disp(id) { getStyle(id).visibility = "visible"; }
function succession(id) { getStyle(id).visibility = "inherit"; }
function undisp(id) { getStyle(id).visibility = "hidden"; }
function lock() { browser.lockScreen(); }
function unlock() { browser.unlockScreen(); }

//function jumpUrl(page) { browser.launchDocument(page, "cut"); }

function toInt(str) { return parseInt(str, 10); }
function getTop(id) { return pxDel(getStyle(id).top); }
function getLeft(id) { return pxDel(getStyle(id).left); }
function getWidth(id) { return pxDel(getStyle(id).width); }
function getHeight(id) { return pxDel(getStyle(id).height); }
function setTop(id, data) { getStyle(id).top = data + "px"; }
function setLeft(id, data) { getStyle(id).left = data + "px"; }
function setHeight(id, data) { getStyle(id).height = data + "px"; }
function setWidth(id, data) { getStyle(id).width = data + "px"; }
function getVisi(id) { return g(id).normalStyle.visibility; }
function setBackColor(id, data) { getStyle(id).backgroundColorIndex = data; }
function setColor(id, data) { getStyle(id).colorIndex = data; }
function setGrayscale(id, data) { getStyle(id).grayscaleColorIndex = data; }
function pxDel(str) { return toInt(str.substring(0, (str.length - 2))); }

//function playSound(id) { browser.playRomSound("romsound://" + id.toString()); }

function playAif(id) { g(id).streamStatus = "stop";g(id).streamStatus = "play"; }
function startTimer(fun, mse, ite) { return browser.setInterval(fun, mse, ite); }
function stopTimer(id) { browser.clearTimer(id); }
function lockModule(moduleRef,_lock){browser.unlockModuleOnMemory(moduleRef);if(_lock){browser.lockModuleOnMemory(moduleRef);}}
function readBtb(tbl, strac) {var result = new Array();var btb = new BinaryTable(tbl, strac);if (btb == null) return null;result = btb.toArray(0, btb.nrow);if (btb.nrow && (result != null && typeof(result[0][0]) == "object")) {for (var i=0; i<btb.nrow; i++) {for(var j=0; j<btb.ncolumn; j++) result[i][j] = result[i][j].valueOf();}}btb.close();return result;}
function trimL0(str){var tStr = "";tStr=""+str;if(tStr=="")return tStr;for(var i=0;i<str.length;i++){if(tStr.length>1&&tStr.charAt(0)=="0"){tStr=tStr.substring(1);}else{break;}}return tStr;}
function isUnde(st){if(typeof st == "undefined"){return true;}else{return false;}}
function vSt(val){
	if(val==2){
		setWidth("Vstream", "240");
		setHeight("Vstream", "135");
		setLeft("Vstream", "666");
		setTop("Vstream", "30");
	}else if(val==3){
	}else if(val==4){
	}else if(val==5){
	}else if(val==6){
		setWidth("Vstream", "720");
		setHeight("Vstream", "405");
		setLeft("Vstream", "120");
		setTop("Vstream", "30");
	}else if(val==7){
	}else if(val==8){
		setLeft("Vstream", "0");
		setTop("Vstream", "0");
		setWidth("Vstream", "960");
		setHeight("Vstream", "540");
	}
}
function sleep(i_val){browser.sleep(i_val);}
function getBrowser(){if(browser.getBrowserSupport("ARIB","APIGroup","Ctrl.Version")){var c_r=browser.getBrowserVersion();if(c_r&&c_r.length==4)return c_r[0]+(c_r[1]+"____________________").substring(0,20)+c_r[2]+c_r[3];}return "____________________________";}
// AIF再生チェックシャープ機チェック
//var gAiffOk=(getBrowser().indexOf("11")==0)?false:true;
// Hybridcast対応判定(0:非対応/1:フェーズ0対応)
function isHC(){return(browser.getBrowserSupport('ARIB','APIGroup','AITControlledApp.Start')==1&&browser.getBrowserSupport("ARIB","AITControlledAppEngineFunction","IPTV-F","HTML5_ph0")==1&&browser.getBrowserSupport('ARIB','AITTransportMethod','XML','HTTP')==1)?1:0;}
//////////////////////////////////////////////////////////////////////////
//　半角数字→全角数字変換
//////////////////////////////////////////////////////////////////////////
function stringChecker(str) {dbg(str);
	var c = "0123456789";
	var cr = "０１２３４５６７８９";
	var moji=""+str;
	var zenkaku="";
	if(null==moji || moji=="null" || moji==""){
		return moji;
	}
	for (var i=0; i<moji.length; i++){
		zenkaku += (c.indexOf( moji.charAt(i) ) != -1)?cr.charAt(moji.charAt(i)):moji.charAt(i); 
	}
	return zenkaku;
}

function stringChecker(str) {
	var c = "0123456789";
	var cr = "０１２３４５６７８９";
	var temp=0;
	var moji="";
	var zenkaku="";
	if(null==str || str=="null" || str==""){
		return "";
	}
	for (var i=0; i<str.length; i++){
		for (var j=0; j<c.length; j++){
			if(str.substring(i,i+1) == c.substring(j,j+1)){
				temp=1;
				zenkaku = cr.substring(j,j+1);
				break;
			}else{
				temp=0;
			}
		}

		if(temp==0){
			moji += str.substring(i,i+1);
		}else if(temp==1){
			moji += zenkaku;
		}
	}
	return moji;
}
//////////////////////////////////////////////////////////////////////////
//　文字列置き換え
//////////////////////////////////////////////////////////////////////////
function repStr(i_str,i_key,i_dem){
	var rt = i_str;
	while(rt.indexOf(i_key)!=-1){
		rt = rt.split(i_key).join(i_dem);
	}
	return rt;
}
//////////////////////////////////////////////////////////////////////////
//　文字列置き換え(旧)
//////////////////////////////////////////////////////////////////////////
function replace_F(word,key,dem){
	var ret = "";
	var keyLen = String(key).length;
	word = String(word);
	key = String(key);
	dem = String(dem);
	var pointer = word.indexOf(key);
	if(pointer!=-1){
		ret += word.substring(0, pointer);
		ret += dem;
		ret += word.substring(pointer+keyLen);
	}else{
		ret = word;
	}
	return ret;
}

//////////////////////////////////////////////////////////////////////////
//　バイナリ（2進数）→整数（10進数）NV格納時等に使用
//////////////////////////////////////////////////////////////////////////
function toNum(val){
	var ret=0;
	var _lb=0;
	var _bb=1;
	var _tb=1;
	for(var _xb=val.length;_xb>=1;_xb--){
		ret+=Number(val.substring(_xb-1,_xb))*_bb;
		_bb=_tb*2;_tb=_bb;
	}
	return ret;
}
//////////////////////////////////////////////////////////////////////////
//　整数（10進数）→バイナリ（2進数）NVから読み込み後コンテンツで使用する際等に使用
//////////////////////////////////////////////////////////////////////////
function toBin(val,len){
	var ret="";
	var _rn=val;
	while(_rn>0){ret=String(_rn%2)+ret;_rn=_rn/2;}
	return num0(ret,len);
}
/*
ストラクチャを決める際は、
格納する10進数、もしくは２進数（フラグ）の桁数から判断する。
U:1B =                 ~255 = 11111111 (8bit)
U:2B =              ~65,535 = 1111111111111111 (16bit)
U:3B =          ~16,777,215 = 111111111111111111111111 (24bit)
U:4B =       ~4,294,967,295 = 11111111111111111111111111111111 (32bit)
U:5B =   ~1,099,511,627,775 = 1111111111111111111111111111111111111111 (40bit)
U:6B = ~281,474,976,710,655 = 111111111111111111111111111111111111111111111111 (48bit)
*/
//************************************************************************
// マップ列インデックス16進｜10進数変換（Ureg格納抽出）
//************************************************************************
// ・i_val：変換値
// ・i_key：変換進数（10 or 16）
//************************************************************************
function conv16(i_val, i_key){
	var rt;
	var t10 = new Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);
	var t16 = "0123456789abcdef";
	if(i_key==10){
		var ts = t16.indexOf(i_val,0);
		if(ts!=-1){
			rt = t10[ts];
		}else{
			rt = i_val;
		}
	}else if(i_key==16){
		if(i_val>=0 && i_val<=15){
			rt = t16.charAt(i_val);
		}else{
			rt = i_val;
		}
	}else{
			rt = i_val;
	}
	return rt;
}
// -----------------------------------------------------------------------------------
// 62進数への変換
// -----------------------------------------------------------------------------------
function cnvt62(val){
	var num62 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	var a = "";
	var b = Number(val);
	while ( b > 0 ){
		a = num62.charAt(b % 62)+a;
		b = b / 62 ;
	}
	return a;
}
// -----------------------------------------------------------------------------------
// 文字列の入れ替え
// -----------------------------------------------------------------------------------
function shuffle(val){
	var chkC = "";
	var cnt = String(val).length;
	var cntNum = null;
	var sfrStr = "";
	for(var c=0;c<cnt;c++){
		cntNum = browser.random(cnt);
		while(chkC.indexOf(String(cntNum)) != -1){cntNum = browser.random(cnt);}
		chkC += cntNum;
		sfrStr += val.charAt(cntNum-1);
	}
	return sfrStr;
}
// -----------------------------------------------------------------------------------
// 通信確認処理
// -----------------------------------------------------------------------------------
function check_IP(){
	//IP機能（isIPConnected()を除く）の有無を行う
	var ipFunc = null;
	var ret = new Array(0, 0);
	ipFunc = check_IP_Function();
	if(ipFunc!=null){
		if(ipFunc == 0){
			ret[0] = 1;
		}else{
			debugN("check_IP_Function()=>"+ipFunc);
		}
	}
	//受信機の物理的なIP接続（isIPConnected()）のチェックをする
	var ipConnect = null;
	ipConnect = check_IP_Connection();
	if(ipConnect!=null){
		if(ipConnect == 0){
			ret[1] = 1;
		}else{
			debugN("check_IP_Connection()=>"+ipConnect);
		}
	}
	return ret;
}
//------------------------------------------------------------------------
//  受信機のIP機能（isIPConnected()を除く）の有無をチェックする
//  戻り値が 0（ゼロ）ならば IP機能ＯＫ!
//------------------------------------------------------------------------
function check_IP_Function()
{
	var ispParam = new Array();
	var id  = 0x04; //ルート証明書ID
	var ver = 0x01; //ルート証明書バージョン

	if(browser.getBrowserSupport("ARIB", "BMLversion", "3.0") != 1) // BML Version 3.0 のサポートチェック
		return(100);
	if(browser.getBrowserSupport("ARIB", "APIGroup", "Com.IP.GetType") != 1) // getConnectionType() のサポートチェック
		return(101);
	if(browser.getBrowserSupport("ARIB", "APIGroup", "Com.IP") != 1) // isIPConnected() のサポートチェック
		return(104);
	if(browser.getBrowserSupport("ARIB", "APIGroup", "Com.IP.Transmit") != 1) // transmitTextDataOverIP() のサポートチェック
		return(105);

	var n = browser.getConnectionType(); // ISP接続の優先利用回線種別の取得
	if(isNaN(n)) // 失敗
		return(300);
	else if((n != 402) && (n != 403)) // 402:固定IP  403:DHCP  これら以外はDialUP携帯とPHS
		return(301);
	else return(0);//上記の条件以外はすべてOK
}
//------------------------------------------------------------------------
//  受信機の物理的なIP接続（isIPConnected()）のチェックする
//  戻り値が 0（ゼロ）ならば IP接続ＯＫ!
//------------------------------------------------------------------------
function check_IP_Connection()
{
	if( browser.isIPConnected() != 1) { // ネットワーク接続の確認
		return(-1);
	}
	else {
		return(0);
	}
}
var isIP = "ok";
var ipAry = check_IP();
if(ipAry[0] != 1 || ipAry[1] != 1){
	isIP = "ng";
}


//////////////////////////////////////////////////////////////////////////
//　ネットワークIDの取得
//////////////////////////////////////////////////////////////////////////
function getNID(){
	var nid = (browser.getBrowserSupport("ARIB","APIGroup","Ctrl.Basic")==1)? browser.getProgramID(3) : "0x0004";
	if(nid == null)return "0000";
	var ret = nid.substring(2,6);//ネットワークIDを取得(0x以降4桁)
	return ret.toUpperCase();
}
//////////////////////////////////////////////////////////////////////////
//　都道府県テーブルから、ネットワークIDを元に地域コードの取得
//////////////////////////////////////////////////////////////////////////
function getACode()
{
	var ret;
	var bt;
	var result = new Array();
	bt = new BinaryTable( g_btbPath.net, g_btbFmt.net );
	g_btbData.net = bt.toArray(0, bt.nrow);
	ret = g_btbData.net[bt.search(0,0,g_netID,32,true,1,result)][3];
	bt.close();

	return ret;

	//地域コード50以上で48に丸める？
	//if(g_areaCode > 50){g_areaCode = 48;}
}
//////////////////////////////////////////////////////////////////////////
//デバッグ表示
//////////////////////////////////////////////////////////////////////////
var debugFlg = false;
var g_DebugLine = 12;//最大表示行
var g_DebugStr = "";//表示デバッグ
function debugN(msg){
 	if (!debugFlg) return;
 	var tmpStr = "";
	var deliStr = (g_DebugStr=="")?"■":"\r\n■";
	g_DebugStr += deliStr + msg;
	var dAry = g_DebugStr.split("\r\n");
	if(dAry.length>g_DebugLine){
		var tmpPos = g_DebugStr.indexOf("\r\n");
		tmpStr = g_DebugStr.substring(tmpPos+2);
	}
	g_DebugStr = tmpStr==""?g_DebugStr:tmpStr;
	setData("pDebug",g_DebugStr);
}
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 以下、NHK様12SEG共通関数
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 数値を"0"で桁数指定パディング
function num0(c_n,c_c){
	var r="00000000000000000000"+c_n;
	return r.substring(r.length-c_c);
}
// 録画判定
function isDVHS(){
	if(isNaN(browser.setCurrentDateMode(1)))return true;
	var c_r=new Date();browser.setCurrentDateMode(0);
	var c_d=browser.subDate(c_r,new Date(),0);
	return isNaN(c_d)||c_d<-3000||c_d>3000;
}
// UTS送信
function us(u_url,c_tkt,c_type,c_ar,c_url){
	if(u_url.length){
		var now=new Date();
		var denbun=c_tkt+":"+(now==null?"00000000000000":now.toString().split("T").join("").split("-").join("").split(":").join(""))+":0000:0:E:"+c_type+":"+c_ar.join(":");
		if(now!=null&&c_tkt.length==16&&c_type.length<=8&&c_type.length){
			var r=browser.transmitTextDataOverIP(u_url,denbun,"EUC-JP");
			if(getBrowser().substring(0,2)=="19")browser.sleep(300);
			if(Number(r[0])==1&&Number(r[1])==200&&String(r[2]).substring(0,5)=="0000:")return r[2];
			denbun+="/"+r[1]+"/"+r[2];
		}
		if(c_url.length){
			browser.transmitTextDataOverIP(c_url,denbun+"/"+getBrowser(),"EUC-JP");
			if(getBrowser().substring(0,2)=="19")browser.sleep(300);
		}
	}
	return"";
}
